drop database gtfs_test;

use database GTFS_TEST;

select * from trip_updates.trip_updates order by trip_id limit 100;

create database GTFS;
create schema GTFS.STAGING;
create stage GTFS.STAGING.GTFS_STAGE;

create schema GTFS.SCHEDULE;


create user GTFS_UPLOADER;
create role GTFS_UPLOADER_ROLE;
grant role ACCOUNTADMIN to role GTFS_UPLOADER_ROLE;
grant role ACCOUNTADMIN to role GTFS_UPLOADER_ROLE;
grant role GTFS_UPLOADER_ROLE to user GTFS_UPLOADER;

alter user GTFS_UPLOADER set password = 'PSWD124';
grant warehouse COMPUTE_WH to role GTFS_UPLOADER_ROLE;

alter user GTFS_UPLOADER
set default_role = GTFS_UPLOADER_ROLE;

select distinct TO_TIMESTAMP(TIMESTAMP), TIMESTAMP from GTFS.REALTIME.VEHICLE_POSITIONS
;

select count(*), count(distinct TRIP_ID) from GTFS.REALTIME.VEHICLE_POSITIONS;

SELECT DISTINCT * FROM GTFS.REALTIME.VEHICLE_POSITIONS;

SELECT count(*), count(distinct TRIP_ID) FROM GTFS.TRIP_UPDATES.TRIP_UPDATES;

select * from GTFS.STAGING.ROUTES;
select * from GTFS.STAGING.STOPS;
select * from GTFS.STAGING.STOP_TIMES;
select * from GTFS.STAGING.TRIPS;

select * from GTFS.TRIP_UPDATES.TRIP_UPDATES;

select TO_TIMESTAMP(1743974012) from GTFS.REALTIME.VEHICLE_POSITIONS;

SELECT ROUTE_SHORT_NAME, COUNT(*) FROM GTFS.STAGING.ROUTES
GROUP BY 1 ORDER BY 2 DESC;

SELECT B.ROUTE_SHORT_NAME, A.TRIP_HEADSIGN, A.SERVICE_ID, COUNT(*) FROM GTFS.STAGING.TRIPS A
JOIN GTFS.STAGING.ROUTES B
ON A.ROUTE_ID = B.ROUTE_ID
GROUP BY ALL ORDER BY 3 DESC;

SELECT B.ROUTE_SHORT_NAME, A.SERVICE_ID, COUNT(*) FROM GTFS.STAGING.TRIPS A
JOIN GTFS.STAGING.ROUTES B
ON A.ROUTE_ID = B.ROUTE_ID
GROUP BY ALL ORDER BY 3 DESC;

SELECT * FROM GTFS.STAGING.TRIPS A
JOIN GTFS.STAGING.ROUTES B
ON A.ROUTE_ID = B.ROUTE_ID
JOIN GTFS.STAGING.STOP_TIMES C
ON A.STOP_TIMES
GROUP BY ALL ORDER BY 3 DESC;

WITH base_data AS (
SELECT 
--*
D.ROUTE_SHORT_NAME, A.ARRIVAL_TIME,  A.STOP_SEQUENCE, A.SHAPE_DIST_TRAVELED, B.TRIP_HEADSIGN, CONCAT(C.STOP_NAME, ' ', C.STOP_DESC) AS STOP_NAME, C.STOP_LAT, C.STOP_LON, 
LAG(C.STOP_LAT, 1) over (order by STOP_SEQUENCE) as prev_stop_lat,
LAG(C.STOP_LON, 1) over (order by STOP_SEQUENCE) as prev_stop_lon
FROM GTFS.STAGING.STOP_TIMES A
JOIN GTFS.STAGING.TRIPS B
ON A.TRIP_ID = B.TRIP_ID
JOIN GTFS.STAGING.STOPS C
ON A.STOP_ID = C.STOP_ID
JOIN GTFS.STAGING.ROUTES D
ON B.ROUTE_ID = D.ROUTE_ID
WHERE A.TRIP_ID = 'block_24_trip_49_service_1'
ORDER BY A.STOP_SEQUENCE ASC
)
select *, ST_DISTANCE(
    TO_GEOGRAPHY('POINT(' || stop_lon || ' ' || stop_lat || ')'),
    TO_GEOGRAPHY('POINT(' || prev_stop_lon || ' ' || prev_stop_lat || ')')
  ) AS distance_meters from base_data;

  select * from gtfs.staging.trips_schedule where trip_id='block_295_trip_4_service_1';


SELECT TRIP_ID FROM GTFS.STAGING.TRIPS;

SELECT DISTINCT SERVICE_ID FROM GTFS.STAGING.TRIPS;
SELECT * FROM GTFS_test.SCHEDULE.CALENDAR;


select distinct ROUTE_SHORT_NAME
from GTFS.SCHEDULE.TRIPS a
join GTFS.SCHEDULE.ROUTES b
on a.ROUTE_ID = b.route_id
WHERE a.service_id like '14%';

select * from GTFS.STAGING.routes;

SELECT CURRENT_USER;
GRANT ROLE GTFS_UPLOADER_ROLE TO USER FILIPSZOLDRA;
USE ROLE GTFS_UPLOADER_ROLE;



CREATE OR REPLACE TABLE GTFS_TEST.SCHEDULE.TRIPS_SCHEDULE AS
SELECT 
A.TRIP_ID,
D.ROUTE_SHORT_NAME, 
-- A.ARRIVAL_TIME,
IFF(SPLIT_PART(A.ARRIVAL_TIME,':','0')>23,CONCAT(TRUNCATE(SPLIT_PART(A.ARRIVAL_TIME,':','0')-24,0),RIGHT(A.ARRIVAL_TIME,6)),A.ARRIVAL_TIME) AS ARRIVAL_TIME,
A.STOP_SEQUENCE, A.SHAPE_DIST_TRAVELED, B.TRIP_HEADSIGN, CONCAT(C.STOP_NAME, ' ', C.STOP_DESC) AS STOP_NAME, C.STOP_ID, C.STOP_LAT, C.STOP_LON
FROM GTFS_TEST.SCHEDULE.STOP_TIMES A
JOIN GTFS_TEST.SCHEDULE.TRIPS B
ON A.TRIP_ID = B.TRIP_ID
JOIN GTFS_TEST.SCHEDULE.STOPS C
ON A.STOP_ID = C.STOP_ID
JOIN GTFS_TEST.SCHEDULE.ROUTES D 
ON B.ROUTE_ID = D.ROUTE_ID
-- WHERE A.TRIP_ID = 'block_555_trip_19_service_3'
WHERE C.STOP_NAME IS NOT NULL AND C.STOP_DESC IS NOT NULL AND B.SERVICE_ID = 'service_5';
ORDER BY A.STOP_SEQUENCE ASC;

create or replace  table GTFS_TEST.TRIP_UPDATES.DELAYS as
WITH CURRENT_TRIPS_SCHEDULE AS (
    SELECT
    TRIP_ID,
    ROUTE_SHORT_NAME,
    STOP_ID,
    STOP_NAME,
    ARRIVAL_TIME
FROM GTFS_TEST.SCHEDULE.TRIPS_SCHEDULE
WHERE ARRIVAL_TIME >= $TMSP
AND ARRIVAL_TIME <= TIMEADD(minute, 15, $TMSP)
QUALIFY ROW_NUMBER() OVER (PARTITION BY TRIP_ID ORDER BY ARRIVAL_TIME ASC) = 1
),
TRIP_UPDATES_NEXT_STOP AS (
    SELECT
    TRIP_ID,
    STOP_ID
FROM GTFS_TEST.TRIP_UPDATES.TRIP_UPDATES
QUALIFY ROW_NUMBER() OVER (PARTITION BY TRIP_ID ORDER BY ARRIVAL ASC NULLS LAST) = 1
)
SELECT 
    A.TRIP_ID, 
    A.ROUTE_SHORT_NAME, 
    A.STOP_NAME AS PLANNED_NEXT_STOP_NAME, 
    CONCAT(D.STOP_NAME, ' ', D.STOP_DESC) AS REAL_NEXT_STOP_NAME,
    TIMEDIFF(MINUTE, A.ARRIVAL_TIME::TIME, TO_TIME(date_trunc('MINUTE', CONVERT_TIMEZONE('UTC', 'Europe/Warsaw', (TO_NUMBER(IFNULL(B.ARRIVAL,B.DEPARTURE))::TIMESTAMP))))) AS DELAY, 
    A.ARRIVAL_TIME::TIME AS PLANNED_SCHEDULED_ARRIVAL,
    TO_TIME(date_trunc('MINUTE', CONVERT_TIMEZONE('UTC', 'Europe/Warsaw', (TO_NUMBER(IFNULL(B.ARRIVAL,B.DEPARTURE))::TIMESTAMP)))) AS PLANNED_REAL_ARRIVAL,
    B.TRIP_ID AS B_TRIP_UPDATE,
    C.TRIP_ID AS C_TRIP_UPDATE
FROM CURRENT_TRIPS_SCHEDULE A
LEFT JOIN GTFS_TEST.TRIP_UPDATES.TRIP_UPDATES B
ON A.TRIP_ID = B.TRIP_ID
AND A.STOP_ID = B.STOP_ID
LEFT JOIN TRIP_UPDATES_NEXT_STOP C
ON A.TRIP_ID = C.TRIP_ID
LEFT JOIN GTFS.SCHEDULE.STOPS D
ON C.STOP_ID = D.STOP_ID;





SET TMSP = 
TO_TIME(date_trunc('MINUTE',CONVERT_TIMEZONE(
  'UTC',
  'Europe/Warsaw',
(TO_NUMBER(1745348122)::TIMESTAMP)
)));

SELECT TIMEADD(hour, 1, $TMSP);

select $TMSP;

SELECT MIN(TO_TIME(date_trunc('MINUTE', CONVERT_TIMEZONE('UTC', 'Europe/Warsaw', (TO_NUMBER(IFNULL(ARRIVAL,DEPARTURE))::TIMESTAMP))))),
MAX(TO_TIME(date_trunc('MINUTE', CONVERT_TIMEZONE('UTC', 'Europe/Warsaw', (TO_NUMBER(IFNULL(ARRIVAL,DEPARTURE))::TIMESTAMP)))))
FROM GTFS.TRIP_UPDATES.TRIP_UPDATES;

SELECT TO_TIME(date_trunc('MINUTE', CONVERT_TIMEZONE('UTC', 'Europe/Warsaw', (TO_NUMBER(IFNULL(ARRIVAL,DEPARTURE))::TIMESTAMP)))), TO_TIMESTAMP_NTZ(TO_NUMBER(IFNULL(ARRIVAL,DEPARTURE)))
FROM GTFS_TEST.TRIP_UPDATES.TRIP_UPDATES;

//1745344647

select * from GTFS_TEST.TRIP_UPDATES.TRIP_UPDATES
where stop_id = 'block_342_trip_16_service_1';


SELECT * FROM GTFS_TEST.TRIP_UPDATES.TRIP_UPDATES
WHERE MODE = 'M';

SELECT distinct LOAD_TIMESTAMP, TO_TIMESTAMP(TO_NUMBER(LOAD_TIMESTAMP)) FROM GTFS_TEST.TRIP_UPDATES.TRIP_UPDATES;


select * from GTFS.SCHEDULE.TRIPS_SCHEDULE
where route_short_name = 152;



select * from GTFS_TEST.TRIP_UPDATES.DELAYS
where trip_id = 'block_411_trip_18_service_1';
//block_411_trip_18_service_1	307	Michałowice Banasiówka 01			20:55:00			block_411_trip_18_service_1

select TRIP_UPDATES.stop_id, TO_TIME(date_trunc('MINUTE', CONVERT_TIMEZONE('UTC', 'Europe/Warsaw', (TO_NUMBER(IFNULL(ARRIVAL,DEPARTURE))::TIMESTAMP)))) as timestamp,
CONCAT(STOP_NAME, ' ', STOP_DESC) as STOP_NAME
from GTFS_TEST.TRIP_UPDATES.TRIP_UPDATES
LEFT JOIN GTFS_test.SCHEDULE.STOPS
on trip_updates.stop_id = stops.stop_id
where TRIP_ID = 'block_411_trip_18_service_1';
//stop_310_74719

select * from GTFS_TEST.TRIP_UPDATES.TRIP_UPDATES
where trip_id = 'block_411_trip_18_service_1';

select * from GTFS.SCHEDULE.STOPS;
select * from GTFS.SCHEDULE.TRIPS_SCHEDULE
where trip_id = 'block_411_trip_18_service_1';
//stop_742_105801 Michałowice Banasiówka 01

SELECT TRIP_ID, COUNT(DISTINCT ROUTE_SHORT_NAME)
FROM GTFS_TEST.SCHEDULE.TRIPS_SCHEDULE
GROUP BY 1 ORDER BY 2 DESC;






CREATE OR REPLACE TABLE GTFS_TEST.SCHEDULE.TRIPS_SCHEDULE AS
SELECT 
A.TRIP_ID,
D.ROUTE_SHORT_NAME, 
-- A.ARRIVAL_TIME,
IFF(SPLIT_PART(A.ARRIVAL_TIME,':','0')>23,CONCAT(TRUNCATE(SPLIT_PART(A.ARRIVAL_TIME,':','0')-24,0),RIGHT(A.ARRIVAL_TIME,6)),A.ARRIVAL_TIME) AS ARRIVAL_TIME,
A.STOP_SEQUENCE, A.SHAPE_DIST_TRAVELED, B.TRIP_HEADSIGN, CONCAT(C.STOP_NAME, ' ', C.STOP_DESC) AS STOP_NAME, C.STOP_ID, C.STOP_LAT, C.STOP_LON
FROM GTFS_TEST.SCHEDULE.STOP_TIMES A
JOIN GTFS_TEST.SCHEDULE.TRIPS B
ON A.TRIP_ID = B.TRIP_ID
JOIN GTFS_TEST.SCHEDULE.STOPS C
ON A.STOP_ID = C.STOP_ID
JOIN GTFS_TEST.SCHEDULE.ROUTES D 
ON B.ROUTE_ID = D.ROUTE_ID
-- WHERE A.TRIP_ID = 'block_555_trip_19_service_3'
WHERE C.STOP_NAME IS NOT NULL AND C.STOP_DESC IS NOT NULL AND B.SERVICE_ID = 'service_5';
ORDER BY A.STOP_SEQUENCE ASC;

SELECT B.TRIP_ID,
COUNT(DISTINCT D.ROUTE_SHORT_NAME)
FROM GTFS_TEST.SCHEDULE.TRIPS B
JOIN GTFS_TEST.SCHEDULE.ROUTES D 
ON B.ROUTE_ID = D.ROUTE_ID
where b.service_id = 'service_1'
GROUP BY 1 ORDER BY 2 DESC;

select * from GTFS_TEST.SCHEDULE.TRIPS
where load_timestamp != '{{ ds }}'
order by trip_id asc;


SELECT B.TRIP_ID,
COUNT(DISTINCT D.ROUTE_SHORT_NAME)
FROM GTFS.SCHEDULE.TRIPS B
JOIN GTFS.SCHEDULE.ROUTES D 
ON B.ROUTE_ID = D.ROUTE_ID
where b.service_id = 'service_1'
GROUP BY 1 ORDER BY 2 DESC;

select * from GTFS.SCHEDULE.TRIPS
where trip_id = 'block_464_trip_9_service_1';

select * from GTFS_test.SCHEDULE.ROUTES
WHERE ROUTE_ID = 'route_61'
or route_id = 'route_807';

GTFS_TEST.SCHEDULE.ROUTES;

select mode, count(*) from GTFS_TEST.TRIP_UPDATES.TRIP_UPDATES
group by 1;

select * from GTFS_TEST.TRIP_UPDATES.TRIP_UPDATES
where mode = 'A'
 limit 10;

 select * from GTFS_TEST.TRIP_UPDATES.TRIP_UPDATES
 where trip_id = 'block_183_trip_19_service_1';

select count(*), count(distinct trip_id, mode) from GTFS_TEST.SCHEDULE.TRIPS;

select trip_id, mode, count(*) from GTFS_TEST.SCHEDULE.TRIPS
group by all order by 3 desc;

select * from GTFS_TEST.SCHEDULE.TRIPS
where TRIP_ID = 'block_50_trip_17_service_1';

select * from GTFS_TEST.TRIP_UPDATES.TRIP_UPDATES
where TRIP_ID = 'block_50_trip_17_service_1';

select * from GTFS_TEST.TRIP_UPDATES.TRIP_UPDATES limit 10;

select * from 
GTFS_TEST.SCHEDULE.TRIPS a
join GTFS_TEST.TRIP_UPDATES.TRIP_UPDATES b
on a.trip_id = b.trip_id
and a.mode != b.mode;

select * from GTFS_TEST.TRIP_UPDATES.TRIP_UPDATES;

select distinct mode from GTFS_TEST.SCHEDULE.TRIPS;




SELECT distinct LOAD_TIMESTAMP, TO_TIMESTAMP(TO_NUMBER(LOAD_TIMESTAMP)) FROM GTFS_TEST.TRIP_UPDATES.TRIP_UPDATES;

SET TMSP = 
TO_TIME(date_trunc('MINUTE',CONVERT_TIMEZONE(
  'UTC',
  'Europe/Warsaw',
(TO_NUMBER(1745518345)::TIMESTAMP)
)));

create or replace  table GTFS_TEST.TRIP_UPDATES.DELAYS as
WITH CURRENT_TRIPS_SCHEDULE AS (
    SELECT
    TRIP_ID,
    MODE,
    ROUTE_SHORT_NAME,
    STOP_ID,
    STOP_NAME,
    ARRIVAL_TIME
FROM GTFS_TEST.SCHEDULE.TRIPS_SCHEDULE
WHERE ARRIVAL_TIME >= TIMEADD(minute, 1, $TMSP)
AND ARRIVAL_TIME <= TIMEADD(minute, 16, $TMSP)
QUALIFY ROW_NUMBER() OVER (PARTITION BY TRIP_ID ORDER BY ARRIVAL_TIME ASC) = 1
),
TRIP_UPDATES_NEXT_STOP AS (
    SELECT
    TRIP_ID,
    MODE,
    STOP_ID
FROM GTFS_TEST.TRIP_UPDATES.TRIP_UPDATES
QUALIFY ROW_NUMBER() OVER (PARTITION BY TRIP_ID ORDER BY ARRIVAL ASC NULLS LAST) = 1
)
SELECT 
    A.TRIP_ID,
    A.MODE,
    A.ROUTE_SHORT_NAME, 
    A.STOP_NAME AS PLANNED_NEXT_STOP_NAME, 
    CONCAT(D.STOP_NAME, ' ', D.STOP_DESC) AS REAL_NEXT_STOP_NAME,
    TIMEDIFF(MINUTE, A.ARRIVAL_TIME::TIME, TO_TIME(date_trunc('MINUTE', CONVERT_TIMEZONE('UTC', 'Europe/Warsaw', (TO_NUMBER(IFNULL(B.ARRIVAL,B.DEPARTURE))::TIMESTAMP))))) AS DELAY, 
    A.ARRIVAL_TIME::TIME AS PLANNED_SCHEDULED_ARRIVAL,
    TO_TIME(date_trunc('MINUTE', CONVERT_TIMEZONE('UTC', 'Europe/Warsaw', (TO_NUMBER(IFNULL(B.ARRIVAL,B.DEPARTURE))::TIMESTAMP)))) AS PLANNED_REAL_ARRIVAL,
    B.TRIP_ID AS B_TRIP_UPDATE,
    C.TRIP_ID AS C_TRIP_UPDATE
FROM CURRENT_TRIPS_SCHEDULE A
LEFT JOIN GTFS_TEST.TRIP_UPDATES.TRIP_UPDATES B
ON A.TRIP_ID = B.TRIP_ID
AND A.STOP_ID = B.STOP_ID
AND A.MODE = B.MODE
LEFT JOIN TRIP_UPDATES_NEXT_STOP C
ON A.TRIP_ID = C.TRIP_ID
AND A.MODE = C.MODE
LEFT JOIN GTFS_TEST.SCHEDULE.STOPS D
ON C.STOP_ID = D.STOP_ID
AND C.MODE = D.MODE;

SELECT * FROM GTFS_TEST.TRIP_UPDATES.DELAYS;

SELECT DISTINCT TRIP_ID FROM GTFS_TEST.TRIP_UPDATES.DELAYS;

SELECT DISTINCT MODE FROM GTFS_TEST.SCHEDULE.TRIPS_SCHEDULE;

CREATE OR REPLACE TABLE GTFS_TEST.SCHEDULE.TRIPS_SCHEDULE AS
SELECT 
A.TRIP_ID,
A.MODE,
D.ROUTE_SHORT_NAME, 
-- A.ARRIVAL_TIME,
IFF(SPLIT_PART(A.ARRIVAL_TIME,':','0')>23,CONCAT(TRUNCATE(SPLIT_PART(A.ARRIVAL_TIME,':','0')-24,0),RIGHT(A.ARRIVAL_TIME,6)),A.ARRIVAL_TIME) AS ARRIVAL_TIME,
A.STOP_SEQUENCE, A.SHAPE_DIST_TRAVELED, B.TRIP_HEADSIGN, CONCAT(C.STOP_NAME, ' ', C.STOP_DESC) AS STOP_NAME, C.STOP_ID, C.STOP_LAT, C.STOP_LON
FROM GTFS_TEST.SCHEDULE.STOP_TIMES A
JOIN GTFS_TEST.SCHEDULE.TRIPS B
ON A.TRIP_ID = B.TRIP_ID
AND A.MODE = B.MODE
JOIN GTFS_TEST.SCHEDULE.STOPS C
ON A.STOP_ID = C.STOP_ID
AND A.MODE = C.MODE
JOIN GTFS_TEST.SCHEDULE.ROUTES D 
ON B.ROUTE_ID = D.ROUTE_ID
AND B.MODE = D.MODE
-- WHERE A.TRIP_ID = 'block_555_trip_19_service_3'
WHERE C.STOP_NAME IS NOT NULL AND C.STOP_DESC IS NOT NULL AND B.SERVICE_ID = 'service_5';
ORDER BY A.STOP_SEQUENCE ASC;

SELECT * FROM GTFS_TEST.SCHEDULE.STOPS;
SELECT * FROM GTFS_TEST.SCHEDULE.ROUTES;

//TRIP_ID = 'block_2044_trip_22_service_5'
SELECT * FROM GTFS_TEST.SCHEDULE.TRIPS_SCHEDULE
WHERE TRIP_ID = 'block_2170_trip_20_service_5';
//stop_303_41804

SELECT * FROM GTFS_TEST.TRIP_UPDATES.DELAYS
WHERE TRIP_ID = 'block_2170_trip_20_service_5'; //20:12

SELECT * FROM GTFS_TEST.TRIP_UPDATES.TRIP_UPDATES
WHERE TRIP_ID = 'block_2170_trip_20_service_5'; //20:12

SELECT TO_TIME(date_trunc('MINUTE',CONVERT_TIMEZONE(
  'UTC',
  'Europe/Warsaw',
(TO_NUMBER(1745518505)::TIMESTAMP)
)));




create database GTFS;
create schema GTFS.STAGING;
create stage GTFS.STAGING.GTFS_STAGE;

create schema GTFS.SCHEDULE;


create user GTFS_UPLOADER;
create role GTFS_UPLOADER_ROLE;
grant role ACCOUNTADMIN to role GTFS_UPLOADER_ROLE;
grant role ACCOUNTADMIN to role GTFS_UPLOADER_ROLE;
grant role GTFS_UPLOADER_ROLE to user GTFS_UPLOADER;

alter user GTFS_UPLOADER set password = 'PSWD124';
grant warehouse COMPUTE_WH to role GTFS_UPLOADER_ROLE;

alter user GTFS_UPLOADER
set default_role = GTFS_UPLOADER_ROLE;

select distinct TO_TIMESTAMP(TIMESTAMP), TIMESTAMP from GTFS.REALTIME.VEHICLE_POSITIONS
;

select count(*), count(distinct TRIP_ID) from GTFS.REALTIME.VEHICLE_POSITIONS;

SELECT DISTINCT * FROM GTFS.REALTIME.VEHICLE_POSITIONS;

SELECT count(*), count(distinct TRIP_ID) FROM GTFS.TRIP_UPDATES.TRIP_UPDATES;

select * from GTFS.STAGING.ROUTES;
select * from GTFS.STAGING.STOPS;
select * from GTFS.STAGING.STOP_TIMES;
select * from GTFS.STAGING.TRIPS;

select * from GTFS.TRIP_UPDATES.TRIP_UPDATES;

select TO_TIMESTAMP(1743974012) from GTFS.REALTIME.VEHICLE_POSITIONS;

SELECT ROUTE_SHORT_NAME, COUNT(*) FROM GTFS.STAGING.ROUTES
GROUP BY 1 ORDER BY 2 DESC;

SELECT B.ROUTE_SHORT_NAME, A.TRIP_HEADSIGN, A.SERVICE_ID, COUNT(*) FROM GTFS.STAGING.TRIPS A
JOIN GTFS.STAGING.ROUTES B
ON A.ROUTE_ID = B.ROUTE_ID
GROUP BY ALL ORDER BY 3 DESC;

SELECT B.ROUTE_SHORT_NAME, A.SERVICE_ID, COUNT(*) FROM GTFS.STAGING.TRIPS A
JOIN GTFS.STAGING.ROUTES B
ON A.ROUTE_ID = B.ROUTE_ID
GROUP BY ALL ORDER BY 3 DESC;

SELECT * FROM GTFS.STAGING.TRIPS A
JOIN GTFS.STAGING.ROUTES B
ON A.ROUTE_ID = B.ROUTE_ID
JOIN GTFS.STAGING.STOP_TIMES C
ON A.STOP_TIMES
GROUP BY ALL ORDER BY 3 DESC;

WITH base_data AS (
SELECT 
--*
D.ROUTE_SHORT_NAME, A.ARRIVAL_TIME,  A.STOP_SEQUENCE, A.SHAPE_DIST_TRAVELED, B.TRIP_HEADSIGN, CONCAT(C.STOP_NAME, ' ', C.STOP_DESC) AS STOP_NAME, C.STOP_LAT, C.STOP_LON, 
LAG(C.STOP_LAT, 1) over (order by STOP_SEQUENCE) as prev_stop_lat,
LAG(C.STOP_LON, 1) over (order by STOP_SEQUENCE) as prev_stop_lon
FROM GTFS.STAGING.STOP_TIMES A
JOIN GTFS.STAGING.TRIPS B
ON A.TRIP_ID = B.TRIP_ID
JOIN GTFS.STAGING.STOPS C
ON A.STOP_ID = C.STOP_ID
JOIN GTFS.STAGING.ROUTES D
ON B.ROUTE_ID = D.ROUTE_ID
WHERE A.TRIP_ID = 'block_24_trip_49_service_1'
ORDER BY A.STOP_SEQUENCE ASC
)
select *, ST_DISTANCE(
    TO_GEOGRAPHY('POINT(' || stop_lon || ' ' || stop_lat || ')'),
    TO_GEOGRAPHY('POINT(' || prev_stop_lon || ' ' || prev_stop_lat || ')')
  ) AS distance_meters from base_data;

  select * from gtfs.staging.trips_schedule where trip_id='block_295_trip_4_service_1';


SELECT TRIP_ID FROM GTFS.STAGING.TRIPS;

SELECT DISTINCT SERVICE_ID FROM GTFS.STAGING.TRIPS;
SELECT * FROM GTFS_test.SCHEDULE.CALENDAR;


select distinct ROUTE_SHORT_NAME
from GTFS.SCHEDULE.TRIPS a
join GTFS.SCHEDULE.ROUTES b
on a.ROUTE_ID = b.route_id
WHERE a.service_id like '14%';

select * from GTFS.STAGING.routes;

SELECT CURRENT_USER;
GRANT ROLE GTFS_UPLOADER_ROLE TO USER FILIPSZOLDRA;
USE ROLE GTFS_UPLOADER_ROLE;

